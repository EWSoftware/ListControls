<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExItemIndexOutOfRange" xml:space="preserve">
    <value>Item collection index is out of range</value>
  </data>
  <data name="ExDataSourceLocksItems" xml:space="preserve">
    <value>You cannot modify the Item collection if a data source has been specified</value>
  </data>
  <data name="ExNullParameter" xml:space="preserve">
    <value>The parameter cannot be null</value>
  </data>
  <data name="ExNullItems" xml:space="preserve">
    <value>The item collection cannot be null nor can it contain null values</value>
  </data>
  <data name="ExNullValueMember" xml:space="preserve">
    <value>ValueMember property is null or blank.  Cannot locate key.</value>
  </data>
  <data name="ExInvalidMaxDropDownItems" xml:space="preserve">
    <value>MaxDropDownItems must be between 1 and 100</value>
  </data>
  <data name="ExInvalidItemIndex" xml:space="preserve">
    <value>Start index must be -1 or within the bounds of the item collection</value>
  </data>
  <data name="ExWrongValueMember" xml:space="preserve">
    <value>Could not bind to the new value member</value>
  </data>
  <data name="ExInvalidDropDownWidth" xml:space="preserve">
    <value>DropDownWidth cannot be less than zero.</value>
  </data>
  <data name="ExNoSortWithDataSource" xml:space="preserve">
    <value>A sort order is not allowed when a data source is used</value>
  </data>
  <data name="ExWrongDisplayMember" xml:space="preserve">
    <value>Could not bind to the new display member</value>
  </data>
  <data name="ExBadDataSource" xml:space="preserve">
    <value>Complex data binding accepts as a data source either an IList or an IListSource</value>
  </data>
  <data name="DLNavRowCount" xml:space="preserve">
    <value>of {0}</value>
  </data>
  <data name="ExInvalidRowNumber" xml:space="preserve">
    <value>The row value specified is outside the bounds of the list</value>
  </data>
  <data name="ExInvalidSepHeight" xml:space="preserve">
    <value>Separator height must be between 1 and 20</value>
  </data>
  <data name="TCBindNotOverridden" xml:space="preserve">
    <value>The TemplateControl.Bind method must be overridden in derived type '{0}'</value>
  </data>
  <data name="ExNegativeDefSel" xml:space="preserve">
    <value>Default selection cannot be less than zero</value>
  </data>
  <data name="ExNoTemplate" xml:space="preserve">
    <value>No row template has been specified.  Cannot add or delete rows.</value>
  </data>
  <data name="ExAddNotAllowed" xml:space="preserve">
    <value>Additions are not currently allowed</value>
  </data>
  <data name="ExDeleteNotAllowed" xml:space="preserve">
    <value>Deletions are not currently allowed</value>
  </data>
  <data name="ExCannotUseDropDown" xml:space="preserve">
    <value>Cannot use drop down when using the Simple style</value>
  </data>
  <data name="ExInvalidRepeatWait" xml:space="preserve">
    <value>The initial wait for auto-repeating cannot be less than 100 milliseconds</value>
  </data>
  <data name="ExInvalidRepeatInterval" xml:space="preserve">
    <value>The repeat interval cannot be less than 20 milliseconds</value>
  </data>
  <data name="ExBindData1" xml:space="preserve">
    <value>**** [{0}]: Exception occurred in BindData (1): {1}</value>
  </data>
  <data name="ExBindData2" xml:space="preserve">
    <value>**** [{0}]: Exception occurred in BindData (2): {1}</value>
  </data>
  <data name="ExFilterItemOnProp" xml:space="preserve">
    <value>**** [{0}]: Exception occurred in FilterItemOnProperty: {1}</value>
  </data>
  <data name="ExInvalidDataListTemplateType" xml:space="preserve">
    <value>The template type must be derived from TemplateControl</value>
  </data>
  <data name="ExInvalidDropDownTemplateType" xml:space="preserve">
    <value>The drop-down template must be derived from DropDownControl</value>
  </data>
  <data name="ExPropNotSupported" xml:space="preserve">
    <value>This property is not supported.  See documentation.</value>
  </data>
  <data name="DLScrollPos" xml:space="preserve">
    <value>{0} of {1}</value>
  </data>
  <data name="ExNullFindParam" xml:space="preserve">
    <value>The member name and object to find cannot be null</value>
  </data>
  <data name="ExInvalidMember" xml:space="preserve">
    <value>The specified member could not be found in the data source</value>
  </data>
  <data name="ExCellTemplateRequired" xml:space="preserve">
    <value>Operation cannot be completed because this DataGridViewColumn does not have a CellTemplate.</value>
  </data>
  <data name="ExWrongCellTemplateType" xml:space="preserve">
    <value>Value provided for CellTemplate must be of type {0} or derive from it.</value>
  </data>
  <data name="ExFieldNotFound" xml:space="preserve">
    <value>The field '{0}' does not exist in the data source</value>
  </data>
  <data name="ExFormatterCannotConvert" xml:space="preserve">
    <value>Value '{0}' cannot be converted to type '{1}'</value>
  </data>
  <data name="ExInvalidCellValue" xml:space="preserve">
    <value>The combo box cell value is not valid</value>
  </data>
  <data name="ExNodeNameOutOfRange" xml:space="preserve">
    <value>A node with the specified name could not be found</value>
  </data>
  <data name="ExTooFewBindingMembers" xml:space="preserve">
    <value>There are more check box list items than binding members</value>
  </data>
</root>